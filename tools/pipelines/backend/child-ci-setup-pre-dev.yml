stages:
  - validate
  - analyze

validate_branch_name:
  stage: validate
  script:
    - echo "Validating branch name..."
    - |
      BRANCH_NAME=$CI_COMMIT_BRANCH
      echo "Branch name: $BRANCH_NAME"

      if echo "$BRANCH_NAME" | grep -Eq "^(development|qa|beta|main)$"; then
        echo "✅ Branch name '$BRANCH_NAME' is valid for protected branches (development, qa, beta, main)."
      elif echo "$BRANCH_NAME" | grep -Eq "^(feat|fix|hotfix|chore|test|refactor|release)/[a-z0-9_-]+$"; then
        echo "✅ Branch name '$BRANCH_NAME' follows the naming convention."
      else
        echo "❌ Branch name '$BRANCH_NAME' does not follow the naming convention: <type>/<branch-name>"
        echo "Valid types: feat, fix, hotfix, chore, test, refactor, release, development, qa, beta, main"
        exit 1
      fi


validate_commit_messages:
  stage: validate
  image: alpine:latest
  script:
    - apk add --no-cache git bash grep
    - git --version
    - echo "Validating commit messages..."
    - |
      REGEX="^(feat|fix|hotfix|chore|test|refactor|release)(\([a-z0-9_-]+\))?: .{1,72}$"
      INVALID_COMMITS=$(git log -1 --format=%s | grep -vE "$REGEX" || true)

      if [ -n "$INVALID_COMMITS" ]; then
        echo "❌ The following commit messages do not follow the convention:"
        echo "$INVALID_COMMITS"
        echo ""
        echo "Commit message format must follow:"
        echo "<type>(<scope>): <short summary>"
        echo "Examples:"
        echo "  feat(auth): add OAuth 2.0 support"
        echo "  fix(payment): resolve rounding error in total calculation"
        exit 1
      else
        echo "✅ All commit messages follow the convention."
      fi

# Analyze for Backend Directory
analyze_backend:
  stage: analyze
  image: dart:stable
  needs:
    - validate_commit_messages
  script:
    - echo "Setting up Backend environment for analysis..."
    - cd dartstream/dartstream_backend/
    - dart pub get
    - dart analyze > backend_analysis_report.txt || true

    # Separate analysis output into information, warnings, and errors
    - echo "Separating Backend issues into info, warnings, and errors..."
    - grep -i "info" backend_analysis_report.txt > backend_info_issues.txt || true
    - grep -i "warning" backend_analysis_report.txt > backend_warning_issues.txt || true
    - grep -i "error" backend_analysis_report.txt > backend_error_issues.txt || true

    # Display counts of each issue type
    - echo "Summary of Backend Analysis Issues"
    - |
      info_count=$(wc -l < backend_info_issues.txt || echo 0)
      warning_count=$(wc -l < backend_warning_issues.txt || echo 0)
      error_count=$(wc -l < backend_error_issues.txt || echo 0)
      echo "Info Issues = $info_count"
      echo "Warning Issues = $warning_count"
      echo "Error Issues = $error_count"

   # Check for outdated dependencies
    - echo "Checking for outdated dependencies..."
    - dart pub outdated || true
      

    # Optionally display details (commented out for now)
    # - echo "Details of Backend Info Messages:"
    # - cat backend_info_issues.txt || echo "No Info Messages."
    # - echo "Details of Backend Warnings:"
    # - cat backend_warning_issues.txt || echo "No Warnings."
    # - echo "Details of Backend Errors:"
    # - cat backend_error_issues.txt || echo "No Errors."

    # Tracking commits for Backend errors (commit hash)
    - echo "Tracking commits for Backend errors..."
    - |
      error_found=false
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          # Get the last commit hash for the file
          git_log=$(git log -n 1 --pretty=format:"%H" -- $file)
          echo "File: $file - Last modified in commit: $git_log"
          error_found=true
        fi
      done < backend_error_issues.txt

      if $error_found; then
        echo "Pipeline failed due to unresolved Backend issues. Collaboration is encouraged."
        exit 1
      else
        echo "No critical Backend issues found. Passing pipeline."
      fi
  artifacts:
    paths:
      - dartstream/dartstream_backend/.dart_tool/
      - backend_analysis_report.txt
      - backend_info_issues.txt
      - backend_warning_issues.txt
      - backend_error_issues.txt
    expire_in: 1h
  retry: 2

# Analyze for QA Directory
analyze_qa:
  stage: analyze
  image: dart:stable
  needs:
    - analyze_backend
  script:
    - echo "Setting up QA environment for analysis..."
    - cd dartstream/test/
    - dart pub get
    - dart analyze > qa_analysis_report.txt || true

    # Separate analysis output into information, warnings, and errors
    - echo "Separating QA issues into info, warnings, and errors..."
    - grep -i "info" qa_analysis_report.txt > qa_info_issues.txt || true
    - grep -i "warning" qa_analysis_report.txt > qa_warning_issues.txt || true
    - grep -i "error" qa_analysis_report.txt > qa_error_issues.txt || true

    # Display counts of each issue type
    - echo "Summary of QA Analysis Issues"
    - |
      info_count=$(wc -l < qa_info_issues.txt || echo 0)
      warning_count=$(wc -l < qa_warning_issues.txt || echo 0)
      error_count=$(wc -l < qa_error_issues.txt || echo 0)
      echo "Info Issues = $info_count"
      echo "Warning Issues = $warning_count"
      echo "Error Issues = $error_count"

    # Check for outdated dependencies
    - echo "Checking for outdated dependencies..."
    - dart pub outdated || true

    # Optionally display details (commented out for now)
    # - echo "Details of QA Info Messages:"
    # - cat qa_info_issues.txt || echo "No Info Messages."
    # - echo "Details of QA Warnings:"
    # - cat qa_warning_issues.txt || echo "No Warnings."
    # - echo "Details of QA Errors:"
    # - cat qa_error_issues.txt || echo "No Errors."

    # Tracking commits for QA errors (commit hash)
    - echo "Tracking commits for QA errors..."
    - |
      error_found=false
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          # Get the last commit hash for the file
          git_log=$(git log -n 1 --pretty=format:"%H" -- $file)
          echo "File: $file - Last modified in commit: $git_log"
          error_found=true
        fi
      done < qa_error_issues.txt

      if $error_found; then
        echo "Pipeline failed due to unresolved QA issues. Collaboration is encouraged."
        exit 1
      else
        echo "No critical QA issues found. Passing pipeline."
      fi
  artifacts:
    paths:
      - dartstream/test/.dart_tool/
      - qa_analysis_report.txt
      - qa_info_issues.txt
      - qa_warning_issues.txt
      - qa_error_issues.txt
    expire_in: 1h
  retry: 2
