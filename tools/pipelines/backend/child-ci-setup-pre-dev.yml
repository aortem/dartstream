stages:
  - analyze

# Analyze for QA Directory
analyze_qa:
  stage: analyze
  image: dart:stable
  rules:
    - if: $CI_COMMIT_REF_NAME != "main" && $CI_COMMIT_REF_NAME != "development" && $CI_COMMIT_REF_NAME != "qa" && $GITLAB_USER_LOGIN != "alphabetacreatives"
      when: always
    - when: never
  script:
    - echo "Setting up QA environment for analysis..."
    - cd dartstream/test/
    - dart pub get
    - dart analyze > qa_analysis_report.txt

    # Separate analysis output into information, warnings, and errors
    - echo "Separating QA issues into info, warnings, and errors..."
    - grep -i "info" qa_analysis_report.txt > qa_info_issues.txt || true
    - grep -i "warning" qa_analysis_report.txt > qa_warning_issues.txt || true
    - grep -i "error" qa_analysis_report.txt > qa_error_issues.txt || true

    # Display counts of each issue type
    - echo "Summary of QA Analysis Issues"
    - |
      info_count=$(wc -l < qa_info_issues.txt || echo 0)
      warning_count=$(wc -l < qa_warning_issues.txt || echo 0)
      error_count=$(wc -l < qa_error_issues.txt || echo 0)
      echo "Info Issues = $info_count"
      echo "Warning Issues = $warning_count"
      echo "Error Issues = $error_count"

    # Tracking contributors for QA errors
    - echo "Tracking contributors for QA errors..."
    - |
      error_found=false
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          # Get the last commit author for the file
          git_log=$(git log -n 1 --pretty=format:"%an <%ae>" -- $file)
          echo "File: $file - Last modified by: $git_log"
          if [[ $git_log == *"$GITLAB_USER_LOGIN"* ]]; then
            echo "Attention needed on issues in file: $file. Please review."
            error_found=true
          fi
        fi
      done < qa_error_issues.txt

      if $error_found; then
        echo "Pipeline failed due to unresolved QA issues in files recently modified. Collaboration is encouraged."
        exit 1
      else
        echo "No critical QA issues found in files modified by the current user. Passing pipeline."
      fi
  artifacts:
    paths:
      - dartstream/test/.dart_tool/
      - qa_analysis_report.txt
      - qa_info_issues.txt
      - qa_warning_issues.txt
      - qa_error_issues.txt
    expire_in: 1h
  retry: 2

# Analyze for Backend Directory
analyze_backend:
  stage: analyze
  image: dart:stable
  rules:
    - if: $CI_COMMIT_REF_NAME != "main" && $CI_COMMIT_REF_NAME != "development" && $CI_COMMIT_REF_NAME != "qa" && $GITLAB_USER_LOGIN != "alphabetacreatives"
      when: always
    - when: never
  script:
    - echo "Setting up Backend environment for analysis..."
    - cd dartstream/dartstream_backend/
    - dart pub get
    - dart analyze > backend_analysis_report.txt

    # Separate analysis output into information, warnings, and errors
    - echo "Separating Backend issues into info, warnings, and errors..."
    - grep -i "info" backend_analysis_report.txt > backend_info_issues.txt || true
    - grep -i "warning" backend_analysis_report.txt > backend_warning_issues.txt || true
    - grep -i "error" backend_analysis_report.txt > backend_error_issues.txt || true

    # Display counts of each issue type
    - echo "Summary of Backend Analysis Issues"
    - |
      info_count=$(wc -l < backend_info_issues.txt || echo 0)
      warning_count=$(wc -l < backend_warning_issues.txt || echo 0)
      error_count=$(wc -l < backend_error_issues.txt || echo 0)
      echo "Info Issues = $info_count"
      echo "Warning Issues = $warning_count"
      echo "Error Issues = $error_count"

    # Tracking contributors for Backend errors
    - echo "Tracking contributors for Backend errors..."
    - |
      error_found=false
      while IFS= read -r line; do
        file=$(echo $line | awk -F ':' '{print $1}')
        if [[ -n "$file" ]]; then
          # Get the last commit author for the file
          git_log=$(git log -n 1 --pretty=format:"%an <%ae>" -- $file)
          echo "File: $file - Last modified by: $git_log"
          if [[ $git_log == *"$GITLAB_USER_LOGIN"* ]]; then
            echo "Attention needed on issues in file: $file. Please review."
            error_found=true
          fi
        fi
      done < backend_error_issues.txt

      if $error_found; then
        echo "Pipeline failed due to unresolved Backend issues in files recently modified. Collaboration is encouraged."
        exit 1
      else
        echo "No critical Backend issues found in files modified by the current user. Passing pipeline."
      fi
  artifacts:
    paths:
      - dartstream/dartstream_backend/.dart_tool/
      - backend_analysis_report.txt
      - backend_info_issues.txt
      - backend_warning_issues.txt
      - backend_error_issues.txt
    expire_in: 1h
  retry: 2
