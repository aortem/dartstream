stages:
  - release

release:
  stage: release
  image: alpine:latest

  before_script:
    - apk add --no-cache bash curl git jq findutils
    # Pull full dev branch + tags so 'git describe' and ls-remote work
    - git fetch origin development:development --prune --unshallow --tags

  script:
    - |
      set -e
      echo "Using bash version: $BASH_VERSION"
      echo "Project root: $CI_PROJECT_DIR"

      PROJECT_DIRS=$(find . -type f -name "pubspec.yaml" -exec dirname {} \; | sort -u)
      echo "Found candidate project directories:"
      echo "$PROJECT_DIRS"

      for dir in $PROJECT_DIRS; do
        echo
        echo "=========================================="
        echo "üîç Processing directory: ${dir}"

        if [ ! -f "${dir}/CHANGELOG.md" ]; then
          echo "  ‚Üí No CHANGELOG.md found in ${dir}, skipping."
          continue
        fi

        cd "${dir}"
        echo "  ‚Ä¢ CWD: $(pwd)"

        VERSION=$(grep "^version:" pubspec.yaml \
                    | sed "s/version:[[:space:]]*//" \
                    | tr -d '[:space:]')
        echo "  ‚Ä¢ Version (pubspec): $VERSION"

        CHANGELOG_VERSION=$(grep -m1 "^## " CHANGELOG.md \
                            | sed "s/^## *//; s/ .*//")
        echo "  ‚Ä¢ Latest CHANGELOG version: $CHANGELOG_VERSION"

        # robustly get the package name (allow indentation, strip quotes & CRs)
        PUB_NAME=$(grep "^[[:space:]]*name:" pubspec.yaml \
                   | head -n1 \
                   | sed "s/.*name:[[:space:]]*//" \
                   | tr -d '"' \
                   | tr -d '\r')
        echo "  ‚Ä¢ Package name: $PUB_NAME"

        # if we still don't have a name, bail out
        if [ -z "$PUB_NAME" ]; then
          echo "  ‚Üí Could not determine package name, skipping."
          cd "$CI_PROJECT_DIR"
          continue
        fi

        PUB_API="https://pub.dev/api/packages/${PUB_NAME}"
        PUB_JSON=$(curl --silent --fail "$PUB_API" || echo "")
        if echo "$PUB_JSON" | jq empty 2>/dev/null; then
          PUB_DEV_LATEST=$(echo "$PUB_JSON" | jq -r ".latest.version")
        else
          echo "  ‚ö†Ô∏è pub.dev lookup failed or package not published"
          PUB_DEV_LATEST="none"
        fi
        echo "  ‚Ä¢ Latest on pub.dev: $PUB_DEV_LATEST"

        # Original global latest tag logic (commented out)
        # LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        # Updated: Get latest tag for this specific package only
        LATEST_TAG=$(git tag --list "${PUB_NAME}-v*" --sort=-v:refname | head -n1)
        echo "  ‚Ä¢ Latest Git tag for $PUB_NAME: $LATEST_TAG"

        # Original tag format (commented out)
        # TAG="v$VERSION"

        # Updated tag format
        TAG="${PUB_NAME}-v$VERSION"

        if [ "$TAG" != "$LATEST_TAG" ] && \
           { [ "$PUB_DEV_LATEST" = "none" ] || [ "$VERSION" != "$PUB_DEV_LATEST" ]; }; then
          echo "  ‚úÖ New version detected. Proceeding with auto-release."
        else
          echo "  ‚ÑπÔ∏è Version not bumped or already published."
          echo "  ‚Ä¢ Git diff since $LATEST_TAG:"
          git diff --stat "$LATEST_TAG" HEAD || true
          cd "$CI_PROJECT_DIR"
          continue
        fi

        git config --global user.email "${_GIT_USER}"
        git config --global user.name  "${_GIT_USER}"
        git remote set-url origin \
          https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@gitlab.com/dartapps/apps/dartstream/dartstream-opensource.git

        echo "  ‚Ä¢ Creating Git tag $TAG"
        git tag "$TAG"
        echo "  ‚Ä¢ Pushing tag to origin"
        git push origin "$TAG"

        RELEASE_NOTES=$(awk "/^## \\[$VERSION\\]/ {flag=1; next} /^## / {if(flag) exit} flag" CHANGELOG.md)
        echo -e "  ‚Ä¢ Release notes:\n$RELEASE_NOTES"

        echo "  ‚Ä¢ Creating GitLab release for $TAG"
        curl -s --request POST \
          --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
          --data "name=Release $TAG" \
          --data "tag_name=$TAG" \
          --data-urlencode "description=${RELEASE_NOTES}" \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"

        cd "$CI_PROJECT_DIR"
      done

      echo
      echo "‚úÖ All directories processed."

  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
