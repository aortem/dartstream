stages:
  - release

release:
  stage: release
  image:
    name: alpine/git
    entrypoint: ["/bin/sh", "-c"]
  before_script:
    - apk add --no-cache bash jq curl
  script:
    - |
      # Change into the project folder and fetch tags.
      cd firebase-dart-admin-auth-sdk
      git fetch --tags

      # Extract the current version from pubspec.yaml.
      VERSION="$(grep '^version:' pubspec.yaml | sed 's/version: //')"
      echo "Version from pubspec.yaml: $VERSION"

      # Get the latest Git tag (assumes tags are prefixed with "v").
      LATEST_TAG=$(git describe --tags --abbrev=0)
      echo "Latest Git tag: $LATEST_TAG"

      # Query pub.dev for the latest published version.
      PUB_PACKAGE_NAME="$(grep '^name:' pubspec.yaml | sed 's/name: //')"
      PUB_API_URL="https://pub.dev/api/packages/${PUB_PACKAGE_NAME}"
      PUB_DEV_LATEST=$(curl --silent "$PUB_API_URL" | jq -r '.latest.version')
      echo "Latest version on pub.dev: $PUB_DEV_LATEST"

      # Determine if the version has been bumped.
      # If current version is different from both the latest tag and pub.dev,
      # then we assume the version has been bumped already and we proceed.
      if [ "v$VERSION" != "$LATEST_TAG" ] && [ "$VERSION" != "$PUB_DEV_LATEST" ]; then
        echo "New version detected. Proceeding with auto-release."
      else
        echo "Version has not been bumped."
        echo "Printing code changes for manual review so you can update the changelog."
        CODE_CHANGES=$(git diff --stat "$LATEST_TAG" HEAD)
        echo "Code changes since $LATEST_TAG:"
        echo "$CODE_CHANGES"
        exit 0
      fi
    - git config --global user.email "ci@aortem.com"
    - git config --global user.name "Aortem CI/CD"
    - git tag "v$VERSION"
    - git push origin "v$VERSION"
    - |
      # Extract release notes for the current version from CHANGELOG.md.
      # This looks for a header like "## [0.0.3-pre]" (without the "v") and prints
      # all lines until the next header that starts with "## ".
      RELEASE_NOTES=$(awk '/^## \['"$VERSION"'\]/ {flag=1; next} /^## / {if(flag){exit}} flag' CHANGELOG.md)
      echo "Release notes extracted:"
      echo "$RELEASE_NOTES"
    - |
      # Create a GitLab release using the Releases API.
      curl --request POST \
        --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
        --data "name=Release v$VERSION" \
        --data "tag_name=v$VERSION" \
        --data-urlencode "description=${RELEASE_NOTES}" \
        "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
