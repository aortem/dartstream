stages:
  - release

release:
  stage: release
  image: alpine/git
  before_script:
    - apk add --no-cache bash jq curl
  script:
    - |
      # Extract version from pubspec.yaml
      VERSION="$(grep '^version:' pubspec.yaml | sed 's/version: //')"
      echo "Version is: $VERSION"
    - |
      # Exit if the tag already exists (using "v" prefix for the Git tag)
      if git tag --list "v$VERSION"; then
        echo "Tag v$VERSION already exists"
        exit 0
      fi
    - git config --global user.email "ci@aortem.com"
    - git config --global user.name "Aortem CI/CD"
    - git tag "v$VERSION"
    - git push origin "v$VERSION"
    - |
      # Extract release notes for the current version from CHANGELOG.md.
      # This looks for a header like "## [0.0.3-pre]" (without a 'v') and prints all
      # lines until the next header that starts with "## ".
      RELEASE_NOTES=$(awk '/^## \['"$VERSION"'\]/ {flag=1; next} /^## / {if(flag){exit}} flag' CHANGELOG.md)
      echo "Release notes extracted:"
      echo "$RELEASE_NOTES"
    - |
      # Create a GitLab release using the Releases API.
      curl --request POST \
        --header "PRIVATE-TOKEN: ${GITLAB_TOKEN}" \
        --data "name=Release v$VERSION" \
        --data "tag_name=v$VERSION" \
        --data-urlencode "description=${RELEASE_NOTES}" \
        "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/releases"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'